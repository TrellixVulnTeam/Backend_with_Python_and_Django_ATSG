Los operadores nos permiten trabajar con valores y generar nuevos valores por medio de estas operaciones.

Existen muchos operadores básicos,

(+) Suma
(-) Resta
(asterisco) Multiplicación
(/) División
(//) División de enteros
(%) Operador de módulo
(doble asterisco) Potencias
(>) Mayor que
(<) Menor que
(==) Igual
(>=) Mayor igual
(<=) Menor igual
¿Qué operadores matemáticos te parecen más útiles?

¿En qué orden se evalúan las matemáticas operaciones complejas?

PEMDAS
Paréntesis xD
Exponentes
Multiplicación / División
Adición / Sustracción
Una forma fácil de recordar éste orden es usando el acrónimo PEMDAS (ParentesisExponentesMultiplicaciónDivisiónAdiciónSustracción)
Valores y Tipos
Los tipos le permiten a Python saber cuál es el resultado de aplicar determinada operación, los tipos básicos son:
Integer <int>
Float <float>
String <str>
Boolean <bool>
Para revisar de qué tipo es un dato puedes usar la función type.
Ejemplos:
type(2) - retorna int
type('Hola') - retorna str
Recuerda que tu código debe ser claro, para permitir que otros programadores lo puedan leer.

Declarar variables y expresiones
Las variables nos permiten guardar valores, permitiéndonos reutilizarlos en diferentes partes del código y haciendo nuestros programas más legibles.

El valor que contiene una variable puede ser reasignado, significa que podemos asignarle diferentes valores a una misma variable.

Las variables tienen algunas limitantes, por ejemplo

Tienen que tener un nombre significativo, es decir, que nos digan qué están haciendo.
No podemos usar palabras reservadas del lenguaje como nombres para nuestras variables (por ejemplo class, false, none, true).
Para definir una variable escribes el nombre que quieres asignarle y con = defines el valor que va a almacenar, por ejemplo:

pi = 3.14159
radio =3
area = pi * radio**2
print(area)

Recuerda:
Todos los programas de Python deben guardarse con extensión .py
Para darle soporte a acentos en nuestros programas debemos usar la línea # -*- coding: utf-8 -*-

Uno de las cosas más poderosas en programación es controlar el flujo de ejecución, para esto utilizamos condicionales.

Las condicionales son sentencias que devuelven un valor booleano (True, False)

Podemos utilizar:

Operadores relacionales:

== Es igual
!= Es diferente
> Es mayor
>= Es mayor o igual
< Es menor
<= Es menor o igual

Operadores lógicos:

and
or
not

El Zen de Python
Hermoso es mejor que feo.
Explícito es mejor que implícito.
Simple es mejor que complejo.
Complejo es mejor que complicado.
Sencillo es mejor que anidado.
Escaso es mejor que denso.
La legibilidad cuenta.
Los casos especiales no son lo suficientemente especiales para romper las reglas.
Lo práctico le gana a la pureza.
Los errores no debe pasar en silencio.
A menos que sean silenciados.
En cara a la ambigüedad, rechazar la tentación de adivinar.
Debe haber una - y preferiblemente sólo una - manera obvia de hacerlo.
Aunque esa manera puede no ser obvia en un primer momento a menos que seas holandés.
Ahora es mejor que nunca.
Aunque “nunca” es a menudo mejor que “ahora mismo”.
Si la aplicación es difícil de explicar, es una mala idea.
Si la aplicación es fácil de explicar, puede ser una buena idea.
Los espacios de nombres son una gran idea ¡hay que hacer más de eso!

Un string es una secuencia de caracteres, donde cada caracter tiene un indice que inicia en cero, por ejemplo

my_string = 'platzi'

my_string[0] # p
my_string[1] # l
my_string[2] # a
my_string[3] # t
my_string[4] # z
my_string[5] # i
Para conocer la longitud de un string podemos usar la funcion len

len(my_string) # 6
Los string tienen algunos métodos útiles cómo:

my_string.upper() # retorna el string en máyusculas
my_string.lower() # retorna el string en minúscula
my_string.find('F') # retorna el índice donde se encuentra